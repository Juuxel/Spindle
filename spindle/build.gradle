plugins {
    id 'java-library'
}

configurations {
    fabricLoader {
        canBeResolved = true
        canBeConsumed = false
    }

    fabricLoaderDependencies {
        canBeResolved = true
        canBeConsumed = false
    }

    api {
        extendsFrom fabricLoader
    }

    compileClasspath {
        extendsFrom fabricLoaderDependencies
    }
}

repositories {
    mavenLocal()
}

dependencies {
    implementation libs.bundles.forge.environment
    implementation libs.joptsimple
    implementation libs.log4j.api
    fabricLoader libs.fabric.loader
    compileOnly libs.jetbrains.annotations

    compileOnly 'net.minecraftforge:fmlloader:1.19.4-45.0.40'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

jar {
    manifest {
        attributes 'Automatic-Module-Name': 'io.github.juuxel.spindle'
    }
}

import groovy.json.JsonSlurper

afterEvaluate {
    def loaderJar = configurations.fabricLoader.singleFile
    def installerJsonFile = zipTree(loaderJar).matching {
        include 'fabric-installer.json'
    }.singleFile
    def installerJson = new JsonSlurper().parse(installerJsonFile)
    for (def library : installerJson.libraries.common) {
        dependencies {
            fabricLoaderDependencies library.name
        }
    }
}

task createMultiMcPatch {
    inputs.property('group', project.group)
    inputs.property('name', project.name)
    inputs.property('version', project.version)
    inputs.files(configurations.fabricLoaderDependencies)
    def output = new File(buildDir, 'multimc.json')
    outputs.file(output).withPropertyName('patchFile')

    doLast {
        def configuration = configurations.fabricLoaderDependencies.copy()
        configuration.exclude group: 'org.ow2.asm'
        def resolved = configuration.resolvedConfiguration
        def json = [
            formatVersion: 1,
            name: 'Spindle',
            uid: 'io.github.juuxel.spindle',
            version: project.version,
            libraries: []
        ]

        for (def artifact : resolved.resolvedArtifacts) {
            def id = artifact.moduleVersion.id
            def notation = "$id.group:$id.name:$id.version"
            json.libraries.add([
                name: notation,
                url: 'https://maven.fabricmc.net/'
            ])
        }

        for (def dependency : configurations.fabricLoader.dependencies) {
            json.libraries.add([
                name: "$dependency.group:$dependency.name:$dependency.version",
                url: repositories.mavenLocal().url.toString()
            ])
        }

        def publication = (MavenPublication) publishing.publications.maven
        json.libraries.add([
            name: "$publication.groupId:$publication.artifactId:$publication.version",
            url: repositories.mavenLocal().url.toString(),
        ])

        output.text = groovy.json.JsonOutput.toJson(json)
    }
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenWithFabricDeps(MavenPublication) {
            artifactId = 'spindle-with-fabric-deps'

            pom.withXml {
                def depsNode = asNode().appendNode('dependencies')
                def addDep = { group, artifact, version, scope ->
                    def dep = depsNode.appendNode('dependency')
                    dep.appendNode('groupId', group)
                    dep.appendNode('artifactId', artifact)
                    dep.appendNode('version', version)
                    dep.appendNode('scope', scope)
                }

                addDep project.group, publications.maven.artifactId, project.version, 'compile'
                for (def dep : configurations.fabricLoaderDependencies.allDependencies) {
                    addDep dep.group, dep.name, dep.version, 'runtime'
                }
            }
        }
    }
}
