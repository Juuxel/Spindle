plugins {
    id 'java-library'
}

configurations {
    fabricLoader {
        canBeResolved = true
        canBeConsumed = false
    }

    fabricLoaderDependencies {
        canBeResolved = true
        canBeConsumed = false
    }

    api {
        extendsFrom fabricLoader
    }

    compileClasspath {
        extendsFrom fabricLoaderDependencies
    }
}

dependencies {
    implementation libs.bundles.forge.environment
    implementation libs.joptsimple
    implementation libs.log4j.api
    fabricLoader libs.fabric.loader
    compileOnly libs.jetbrains.annotations

    compileOnly 'net.minecraftforge:fmlloader:1.19.4-45.0.40'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

jar {
    manifest {
        attributes 'Automatic-Module-Name': 'io.github.juuxel.spindle'
    }
}

import groovy.json.JsonSlurper

afterEvaluate {
    def loaderJar = configurations.fabricLoader.singleFile
    def installerJsonFile = zipTree(loaderJar).matching {
        include 'fabric-installer.json'
    }.singleFile
    def installerJson = new JsonSlurper().parse(installerJsonFile)
    for (def library : installerJson.libraries.common) {
        dependencies {
            fabricLoaderDependencies library.name
        }
    }
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenWithFabricDeps(MavenPublication) {
            artifactId = 'spindle-with-fabric-deps'

            pom.withXml {
                def depsNode = asNode().appendNode('dependencies')
                def addDep = { group, artifact, version, scope ->
                    def dep = depsNode.appendNode('dependency')
                    dep.appendNode('groupId', group)
                    dep.appendNode('artifactId', artifact)
                    dep.appendNode('version', version)
                    dep.appendNode('scope', scope)
                }

                addDep project.group, publications.maven.artifactId, project.version, 'compile'
                for (def dep : configurations.fabricLoaderDependencies.allDependencies) {
                    addDep dep.group, dep.name, dep.version, 'runtime'
                }
            }
        }
    }
}
