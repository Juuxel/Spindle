plugins {
    id 'fabric-loom'
}

configurations {
    runtimeOnlyModule {
        canBeResolved = true
        canBeConsumed = false

        resolutionStrategy {
            force loaderLibraries.allDependencies
            force minecraftRuntimeLibraries.allDependencies
        }
    }

    runtimeOnly {
        extendsFrom runtimeOnlyModule
    }
}

repositories {
    mavenLocal()
}

dependencies {
    minecraft 'net.minecraft:minecraft:1.19.4'
    mappings 'net.fabricmc:yarn:1.19.4+build.2:v2'

    modImplementation libs.fabric.loader
    runtimeOnlyModule libs.fabric.loader
    runtimeOnlyModule project(path: ':spindle', configuration: 'dev')
    runtimeOnlyModule libs.bundles.forge.environment
    runtimeOnlyModule libs.bundles.asm
}

def resolvePaths(Configuration configuration) {
    return configuration.resolve().collect { it.absolutePath }
}

def setupClasspathData() {
    def modulePath = resolvePaths(configurations.runtimeOnlyModule).join(File.pathSeparator)

    return [
        modulePath   : modulePath,
    ]
}

afterEvaluate {
    def classpathData = setupClasspathData()

    loom {
        runs {
            spindleClient {
                client()
                configName = 'Spindle Client'
                mainClass.set 'cpw.mods.modlauncher.Launcher'
                ideConfigGenerated = true

                programArgs '--launchTarget', 'spindleclient'
                vmArgs '-p', classpathData.modulePath,
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--add-opens', 'java.base/java.util.jar=cpw.mods.securejarhandler',
                    '--add-opens', 'java.base/java.lang.invoke=cpw.mods.securejarhandler',
                    '--add-exports', 'java.base/sun.security.util=cpw.mods.securejarhandler'
            }
        }
    }
}
